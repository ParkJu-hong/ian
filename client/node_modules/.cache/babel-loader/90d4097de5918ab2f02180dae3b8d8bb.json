{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\n'use strict';\n\nconst {\n  Transform\n} = require('stream');\n\nclass JSONParser extends Transform {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      readableObjectMode: true\n    });\n    this.chunks = [];\n    this.globalOptions = { ...options\n    };\n  }\n\n  _transform(chunk, encoding, callback) {\n    this.chunks.push(String(chunk)); // todo consider using a string decoder\n\n    callback();\n  }\n\n  _flush(callback) {\n    try {\n      const fields = JSON.parse(this.chunks.join(''));\n      Object.keys(fields).forEach(key => {\n        const value = fields[key];\n        this.push({\n          key,\n          value\n        });\n      });\n    } catch (e) {\n      callback(e);\n      return;\n    }\n\n    this.chunks = null;\n    callback();\n  }\n\n}\n\nmodule.exports = JSONParser;","map":{"version":3,"sources":["/Users/bagjuhong/Desktop/ian/node_modules/formidable/src/parsers/JSON.js"],"names":["Transform","require","JSONParser","constructor","options","readableObjectMode","chunks","globalOptions","_transform","chunk","encoding","callback","push","String","_flush","fields","JSON","parse","join","Object","keys","forEach","key","value","e","module","exports"],"mappings":"AAAA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,QAAD,CAA7B;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AACjCG,EAAAA,WAAW,GAAe;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACxB,UAAM;AAAEC,MAAAA,kBAAkB,EAAE;AAAtB,KAAN;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,aAAL,GAAqB,EAAE,GAAGH;AAAL,KAArB;AACD;;AAEDI,EAAAA,UAAU,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA4B;AACpC,SAAKL,MAAL,CAAYM,IAAZ,CAAiBC,MAAM,CAACJ,KAAD,CAAvB,EADoC,CACH;;AACjCE,IAAAA,QAAQ;AACT;;AAEDG,EAAAA,MAAM,CAACH,QAAD,EAAW;AACf,QAAI;AACF,YAAMI,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKX,MAAL,CAAYY,IAAZ,CAAiB,EAAjB,CAAX,CAAf;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,OAApB,CAA6BC,GAAD,IAAS;AACnC,cAAMC,KAAK,GAAGR,MAAM,CAACO,GAAD,CAApB;AACA,aAAKV,IAAL,CAAU;AAAEU,UAAAA,GAAF;AAAOC,UAAAA;AAAP,SAAV;AACD,OAHD;AAID,KAND,CAME,OAAOC,CAAP,EAAU;AACVb,MAAAA,QAAQ,CAACa,CAAD,CAAR;AACA;AACD;;AACD,SAAKlB,MAAL,GAAc,IAAd;AACAK,IAAAA,QAAQ;AACT;;AAzBgC;;AA4BnCc,MAAM,CAACC,OAAP,GAAiBxB,UAAjB","sourcesContent":["/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst { Transform } = require('stream');\n\nclass JSONParser extends Transform {\n  constructor(options = {}) {\n    super({ readableObjectMode: true });\n    this.chunks = [];\n    this.globalOptions = { ...options };\n  }\n\n  _transform(chunk, encoding, callback) {\n    this.chunks.push(String(chunk)); // todo consider using a string decoder\n    callback();\n  }\n\n  _flush(callback) {\n    try {\n      const fields = JSON.parse(this.chunks.join(''));\n      Object.keys(fields).forEach((key) => {\n        const value = fields[key];\n        this.push({ key, value });\n      });\n    } catch (e) {\n      callback(e);\n      return;\n    }\n    this.chunks = null;\n    callback();\n  }\n}\n\nmodule.exports = JSONParser;\n"]},"metadata":{},"sourceType":"script"}