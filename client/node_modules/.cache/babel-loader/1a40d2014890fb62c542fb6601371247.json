{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\n'use strict';\n\nconst QuerystringParser = require('../parsers/Querystring'); // the `options` is also available through the `this.options` / `formidable.options`\n\n\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/urlencoded/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n\n  return self;\n}; // Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\n\n\nfunction init(_self, _opts) {\n  this.type = 'urlencoded';\n  const parser = new QuerystringParser(this.options);\n  parser.on('data', _ref => {\n    let {\n      key,\n      value\n    } = _ref;\n    this.emit('field', key, value);\n  });\n  parser.once('end', () => {\n    this.ended = true;\n\n    this._maybeEnd();\n  });\n  this._parser = parser;\n  return this;\n}","map":{"version":3,"sources":["/Users/bagjuhong/Desktop/ian/node_modules/formidable/src/plugins/querystring.js"],"names":["QuerystringParser","require","module","exports","plugin","formidable","options","self","test","headers","init","call","_self","_opts","type","parser","on","key","value","emit","once","ended","_maybeEnd","_parser"],"mappings":"AAAA;AAEA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,wBAAD,CAAjC,C,CAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,UAAhB,EAA4BC,OAA5B,EAAqC;AACpD;AACA;;AAEA;AACA,QAAMC,IAAI,GAAG,QAAQF,UAArB;;AAEA,MAAI,cAAcG,IAAd,CAAmBD,IAAI,CAACE,OAAL,CAAa,cAAb,CAAnB,CAAJ,EAAsD;AACpDC,IAAAA,IAAI,CAACC,IAAL,CAAUJ,IAAV,EAAgBA,IAAhB,EAAsBD,OAAtB;AACD;;AAED,SAAOC,IAAP;AACD,CAZD,C,CAcA;AACA;AACA;;;AACA,SAASG,IAAT,CAAcE,KAAd,EAAqBC,KAArB,EAA4B;AAC1B,OAAKC,IAAL,GAAY,YAAZ;AAEA,QAAMC,MAAM,GAAG,IAAIf,iBAAJ,CAAsB,KAAKM,OAA3B,CAAf;AAEAS,EAAAA,MAAM,CAACC,EAAP,CAAU,MAAV,EAAkB,QAAoB;AAAA,QAAnB;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAmB;AACpC,SAAKC,IAAL,CAAU,OAAV,EAAmBF,GAAnB,EAAwBC,KAAxB;AACD,GAFD;AAIAH,EAAAA,MAAM,CAACK,IAAP,CAAY,KAAZ,EAAmB,MAAM;AACvB,SAAKC,KAAL,GAAa,IAAb;;AACA,SAAKC,SAAL;AACD,GAHD;AAKA,OAAKC,OAAL,GAAeR,MAAf;AAEA,SAAO,IAAP;AACD","sourcesContent":["/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst QuerystringParser = require('../parsers/Querystring');\n\n// the `options` is also available through the `this.options` / `formidable.options`\nmodule.exports = function plugin(formidable, options) {\n  // the `this` context is always formidable, as the first argument of a plugin\n  // but this allows us to customize/test each plugin\n\n  /* istanbul ignore next */\n  const self = this || formidable;\n\n  if (/urlencoded/i.test(self.headers['content-type'])) {\n    init.call(self, self, options);\n  }\n\n  return self;\n};\n\n// Note that it's a good practice (but it's up to you) to use the `this.options` instead\n// of the passed `options` (second) param, because when you decide\n// to test the plugin you can pass custom `this` context to it (and so `this.options`)\nfunction init(_self, _opts) {\n  this.type = 'urlencoded';\n\n  const parser = new QuerystringParser(this.options);\n\n  parser.on('data', ({ key, value }) => {\n    this.emit('field', key, value);\n  });\n\n  parser.once('end', () => {\n    this.ended = true;\n    this._maybeEnd();\n  });\n\n  this._parser = parser;\n\n  return this;\n}\n"]},"metadata":{},"sourceType":"script"}