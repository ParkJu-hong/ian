{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\n'use strict';\n\nconst crypto = require('crypto');\n\nconst {\n  EventEmitter\n} = require('events');\n\nclass VolatileFile extends EventEmitter {\n  constructor(_ref) {\n    let {\n      filepath,\n      newFilename,\n      originalFilename,\n      mimetype,\n      hashAlgorithm,\n      createFileWriteStream\n    } = _ref;\n    super();\n    this.lastModifiedDate = null;\n    Object.assign(this, {\n      filepath,\n      newFilename,\n      originalFilename,\n      mimetype,\n      hashAlgorithm,\n      createFileWriteStream\n    });\n    this.size = 0;\n    this._writeStream = null;\n\n    if (typeof this.hashAlgorithm === 'string') {\n      this.hash = crypto.createHash(this.hashAlgorithm);\n    } else {\n      this.hash = null;\n    }\n  }\n\n  open() {\n    this._writeStream = this.createFileWriteStream(this);\n\n    this._writeStream.on('error', err => {\n      this.emit('error', err);\n    });\n  }\n\n  destroy() {\n    this._writeStream.destroy();\n  }\n\n  toJSON() {\n    const json = {\n      size: this.size,\n      newFilename: this.newFilename,\n      length: this.length,\n      originalFilename: this.originalFilename,\n      mimetype: this.mimetype\n    };\n\n    if (this.hash && this.hash !== '') {\n      json.hash = this.hash;\n    }\n\n    return json;\n  }\n\n  toString() {\n    return `VolatileFile: ${this.originalFilename}`;\n  }\n\n  write(buffer, cb) {\n    if (this.hash) {\n      this.hash.update(buffer);\n    }\n\n    if (this._writeStream.closed || this._writeStream.destroyed) {\n      cb();\n      return;\n    }\n\n    this._writeStream.write(buffer, () => {\n      this.size += buffer.length;\n      this.emit('progress', this.size);\n      cb();\n    });\n  }\n\n  end(cb) {\n    if (this.hash) {\n      this.hash = this.hash.digest('hex');\n    }\n\n    this._writeStream.end(() => {\n      this.emit('end');\n      cb();\n    });\n  }\n\n}\n\nmodule.exports = VolatileFile;","map":{"version":3,"sources":["/Users/bagjuhong/Desktop/ian/node_modules/formidable/src/VolatileFile.js"],"names":["crypto","require","EventEmitter","VolatileFile","constructor","filepath","newFilename","originalFilename","mimetype","hashAlgorithm","createFileWriteStream","lastModifiedDate","Object","assign","size","_writeStream","hash","createHash","open","on","err","emit","destroy","toJSON","json","length","toString","write","buffer","cb","update","closed","destroyed","end","digest","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\nconst crypto = require('crypto');\nconst { EventEmitter } = require('events');\n\nclass VolatileFile extends EventEmitter {\n  constructor({ filepath, newFilename, originalFilename, mimetype, hashAlgorithm, createFileWriteStream }) {\n    super();\n\n    this.lastModifiedDate = null;\n    Object.assign(this, { filepath, newFilename, originalFilename, mimetype, hashAlgorithm, createFileWriteStream });\n\n    this.size = 0;\n    this._writeStream = null;\n\n    if (typeof this.hashAlgorithm === 'string') {\n      this.hash = crypto.createHash(this.hashAlgorithm);\n    } else {\n      this.hash = null;\n    }\n  }\n\n  open() {\n    this._writeStream = this.createFileWriteStream(this);\n    this._writeStream.on('error', (err) => {\n      this.emit('error', err);\n    });\n  }\n\n  destroy() {\n    this._writeStream.destroy();\n  }\n\n  toJSON() {\n    const json = {\n      size: this.size,\n      newFilename: this.newFilename,\n      length: this.length,\n      originalFilename: this.originalFilename,\n      mimetype: this.mimetype,\n    };\n    if (this.hash && this.hash !== '') {\n      json.hash = this.hash;\n    }\n    return json;\n  }\n\n  toString() {\n    return `VolatileFile: ${this.originalFilename}`;\n  }\n\n  write(buffer, cb) {\n    if (this.hash) {\n      this.hash.update(buffer);\n    }\n\n    if (this._writeStream.closed || this._writeStream.destroyed) {\n      cb();\n      return;\n    }\n\n    this._writeStream.write(buffer, () => {\n      this.size += buffer.length;\n      this.emit('progress', this.size);\n      cb();\n    });\n  }\n\n  end(cb) {\n    if (this.hash) {\n      this.hash = this.hash.digest('hex');\n    }\n    this._writeStream.end(() => {\n      this.emit('end');\n      cb();\n    });\n  }\n}\n\nmodule.exports = VolatileFile;\n"]},"metadata":{},"sourceType":"script"}