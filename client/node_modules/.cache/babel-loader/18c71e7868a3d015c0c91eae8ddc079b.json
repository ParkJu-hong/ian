{"ast":null,"code":"var _jsxFileName = \"/Users/bagjuhong/Desktop/ian/client/src/web/components/managerComponents/ManagerMain.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from 'axios';\nimport GoogleLogin from 'react-google-login';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ManagerMain() {\n  _s();\n\n  // 리덕스로 로그인되면 다른 컴포넌트로 렌더링하자\n  const dispatch = useDispatch();\n  const ismanagerLogin = useSelector(state => {\n    return state.reducerMenu.ismanagerLogin;\n  });\n\n  async function test(res) {\n    await axios.get('https://www.googleapis.com/oauth2/v2/userinfo?access_token=' + res.accessToken, {\n      headers: {\n        authorization: `token ${res.accessToken}`,\n        accept: 'application/json'\n      }\n    }).then(data => {\n      const isHeManager = data.data.email === \"bejejupark@gmail.com\";\n\n      if (isHeManager) {\n        dispatch({\n          type: 'LOGIN_MANAGER'\n        });\n      } else {\n        console.log('실패함');\n      }\n    }).catch(e => console.log('oAuth token expired'));\n  }\n\n  function ajaxForJsonWebToken() {// nodejs로 만든 서버에서 google로 로그인이 됐을시, jsonwebtoken을 발급해줄 수 있도록 함\n    // 그래서 새로고침해도 브라우저 쿠키에 토큰 표딱지가 있으면 관리자 페이지가 안꺼질 수 있도록\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: ismanagerLogin ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"\\uB85C\\uADF8\\uC778\\uB40C\"\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        clientId: '780867118511-7phr24j325eauivpisavdb062rmi68er.apps.googleusercontent.com',\n        buttonText: \"Google\\uB85C \\uB85C\\uADF8\\uC778\",\n        onSuccess: test,\n        onFailure: test\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ManagerMain, \"Z5XXbwHowS9pXZFYCkGmNeQSNFU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ManagerMain;\nexport default ManagerMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManagerMain\");","map":{"version":3,"sources":["/Users/bagjuhong/Desktop/ian/client/src/web/components/managerComponents/ManagerMain.jsx"],"names":["React","axios","GoogleLogin","useSelector","useDispatch","ManagerMain","dispatch","ismanagerLogin","state","reducerMenu","test","res","get","accessToken","headers","authorization","accept","then","data","isHeManager","email","type","console","log","catch","e","ajaxForJsonWebToken"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACnB;AAEA,QAAMC,QAAQ,GAAGF,WAAW,EAA5B;AACA,QAAMG,cAAc,GAAGJ,WAAW,CAAEK,KAAD,IAAW;AAC1C,WAAOA,KAAK,CAACC,WAAN,CAAkBF,cAAzB;AACH,GAFiC,CAAlC;;AAIA,iBAAeG,IAAf,CAAoBC,GAApB,EAAyB;AACrB,UAAMV,KAAK,CAACW,GAAN,CAAU,gEAAgED,GAAG,CAACE,WAA9E,EAA2F;AAC7FC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,SAAQJ,GAAG,CAACE,WAAY,EADnC;AAELG,QAAAA,MAAM,EAAE;AAFH;AADoF,KAA3F,EAMDC,IANC,CAMIC,IAAI,IAAI;AACV,YAAMC,WAAW,GAAGD,IAAI,CAACA,IAAL,CAAUE,KAAV,KAAoB,sBAAxC;;AACA,UAAID,WAAJ,EAAiB;AACbb,QAAAA,QAAQ,CAAC;AACLe,UAAAA,IAAI,EAAE;AADD,SAAD,CAAR;AAGH,OAJD,MAIO;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH;AACJ,KAfC,EAeCC,KAfD,CAeOC,CAAC,IAAIH,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAfZ,CAAN;AAgBH;;AACD,WAASG,mBAAT,GAA8B,CAC1B;AACA;AAEH;;AAED,sBACI;AAAA,cACKnB,cAAc,gBAAG;AAAA;AAAA,qBAAH,gBAAc;AAAA,6BACzB,QAAC,WAAD;AACA,QAAA,QAAQ,EAAE,0EADV;AAEA,QAAA,UAAU,EAAC,iCAFX;AAGA,QAAA,SAAS,EAAEG,IAHX;AAIA,QAAA,SAAS,EAAEA;AAJX;AAAA;AAAA;AAAA;AAAA;AADyB;AADjC;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GA3CQL,W;UAGYD,W,EACMD,W;;;KAJlBE,W;AA6CT,eAAeA,WAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport GoogleLogin from 'react-google-login';\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction ManagerMain() {\n    // 리덕스로 로그인되면 다른 컴포넌트로 렌더링하자\n\n    const dispatch = useDispatch();\n    const ismanagerLogin = useSelector((state) => {\n        return state.reducerMenu.ismanagerLogin;\n    });\n\n    async function test(res) {\n        await axios.get('https://www.googleapis.com/oauth2/v2/userinfo?access_token=' + res.accessToken, {\n            headers: {\n                authorization: `token ${res.accessToken}`,\n                accept: 'application/json'\n            }\n        })\n            .then(data => {\n                const isHeManager = data.data.email === \"bejejupark@gmail.com\";\n                if (isHeManager) {\n                    dispatch({\n                        type: 'LOGIN_MANAGER'\n                    });\n                } else {\n                    console.log('실패함')\n                }\n            }).catch(e => console.log('oAuth token expired'));\n    }\n    function ajaxForJsonWebToken(){\n        // nodejs로 만든 서버에서 google로 로그인이 됐을시, jsonwebtoken을 발급해줄 수 있도록 함\n        // 그래서 새로고침해도 브라우저 쿠키에 토큰 표딱지가 있으면 관리자 페이지가 안꺼질 수 있도록\n        \n    }\n\n    return (\n        <div>\n            {ismanagerLogin ? <>로그인됌</>: <>\n                <GoogleLogin\n                clientId={'780867118511-7phr24j325eauivpisavdb062rmi68er.apps.googleusercontent.com'}\n                buttonText=\"Google로 로그인\"\n                onSuccess={test}\n                onFailure={test} />\n            </>}\n        </div>\n    )\n}\n\nexport default ManagerMain\n"]},"metadata":{},"sourceType":"module"}