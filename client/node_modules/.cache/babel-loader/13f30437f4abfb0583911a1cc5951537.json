{"ast":null,"code":"var _jsxFileName = \"/Users/bagjuhong/Desktop/ian/client/src/web/components/managerComponents/ManagerMain.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport GoogleLogin from 'react-google-login';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ManagerMain() {\n  _s();\n\n  // 리덕스로 로그인되면 다른 컴포넌트로 렌더링하자\n  const [temp, setTemp] = useState(false);\n  const dispatch = useDispatch();\n  const ismanagerLogin = useSelector(state => {\n    return state.reducerMenu.ismanagerLogin;\n  });\n  useEffect(async () => {\n    // 새로고침해도 그때마다 ajax요청해서 만약 req.header 즉 브라우저의 캐시, 쿠키, 헤더에 토큰이 있다면\n    // 관리자페이지를 Authorizaion할 수 있도록 하는 코드\n    // await axios.post('')\n    if (ismanagerLogin) {\n      ajaxForJsonWebToken(temp);\n    }\n  }, []);\n\n  async function test(res) {\n    setTemp(res.accessToken);\n    await axios.get('https://www.googleapis.com/oauth2/v2/userinfo?access_token=' + res.accessToken, {\n      headers: {\n        authorization: `token ${res.accessToken}`,\n        accept: 'application/json'\n      }\n    }).then(data => {\n      const isHeManager = data.data.email === \"bejejupark@gmail.com\";\n\n      if (isHeManager) {\n        dispatch({\n          type: 'LOGIN_MANAGER'\n        });\n      } else {\n        console.log('실패함');\n      }\n    }).catch(e => console.log('oAuth token expired'));\n  }\n\n  async function ajaxForJsonWebToken(temp) {\n    // nodejs로 만든 서버에서 google로 로그인이 됐을시, jsonwebtoken을 발급해줄 수 있도록 함\n    // 그래서 새로고침해도 브라우저 쿠키에 토큰 표딱지가 있으면 관리자 페이지가 안꺼질 수 있도록\n    console.log('ajaxForJsonWebToken 실행됌');\n    const result = await axios.post('/login', {\n      token: temp\n    });\n    result.then(data => {\n      console.log('data : ', data);\n    }).catch(error => {\n      console.log('error : ', error);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: ismanagerLogin ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"\\uB85C\\uADF8\\uC778\\uB40C\"\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        clientId: '780867118511-7phr24j325eauivpisavdb062rmi68er.apps.googleusercontent.com',\n        buttonText: \"Google\\uB85C \\uB85C\\uADF8\\uC778\",\n        onSuccess: test,\n        onFailure: test\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ManagerMain, \"jIu6lsln9+PrlDKVui2BE2GX17Q=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ManagerMain;\nexport default ManagerMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManagerMain\");","map":{"version":3,"sources":["/Users/bagjuhong/Desktop/ian/client/src/web/components/managerComponents/ManagerMain.jsx"],"names":["React","useState","useEffect","axios","GoogleLogin","useSelector","useDispatch","ManagerMain","temp","setTemp","dispatch","ismanagerLogin","state","reducerMenu","ajaxForJsonWebToken","test","res","accessToken","get","headers","authorization","accept","then","data","isHeManager","email","type","console","log","catch","e","result","post","token","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACnB;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,KAAD,CAAhC;AAEA,QAAMS,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAMK,cAAc,GAAGN,WAAW,CAAEO,KAAD,IAAW;AAC1C,WAAOA,KAAK,CAACC,WAAN,CAAkBF,cAAzB;AACH,GAFiC,CAAlC;AAGAT,EAAAA,SAAS,CAAC,YAAU;AAChB;AACA;AACA;AACA,QAAGS,cAAH,EAAkB;AACdG,MAAAA,mBAAmB,CAACN,IAAD,CAAnB;AACH;AACJ,GAPQ,EAON,EAPM,CAAT;;AASA,iBAAeO,IAAf,CAAoBC,GAApB,EAAyB;AACrBP,IAAAA,OAAO,CAACO,GAAG,CAACC,WAAL,CAAP;AACA,UAAMd,KAAK,CAACe,GAAN,CAAU,gEAAgEF,GAAG,CAACC,WAA9E,EAA2F;AAC7FE,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,SAAQJ,GAAG,CAACC,WAAY,EADnC;AAELI,QAAAA,MAAM,EAAE;AAFH;AADoF,KAA3F,EAMDC,IANC,CAMIC,IAAI,IAAI;AACV,YAAMC,WAAW,GAAGD,IAAI,CAACA,IAAL,CAAUE,KAAV,KAAoB,sBAAxC;;AACA,UAAID,WAAJ,EAAiB;AACbd,QAAAA,QAAQ,CAAC;AACLgB,UAAAA,IAAI,EAAE;AADD,SAAD,CAAR;AAGH,OAJD,MAIO;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH;AACJ,KAfC,EAeCC,KAfD,CAeOC,CAAC,IAAIH,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAfZ,CAAN;AAgBH;;AACD,iBAAed,mBAAf,CAAmCN,IAAnC,EAAwC;AACpC;AACA;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,UAAMG,MAAM,GAAG,MAAM5B,KAAK,CAAC6B,IAAN,CAAW,QAAX,EAAqB;AACtCC,MAAAA,KAAK,EAAEzB;AAD+B,KAArB,CAArB;AAGAuB,IAAAA,MAAM,CACLT,IADD,CACOC,IAAD,IAAQ;AACVI,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBL,IAAvB;AACH,KAHD,EAICM,KAJD,CAIQK,KAAD,IAAS;AACZP,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBM,KAAxB;AACH,KAND;AAOH;;AAED,sBACI;AAAA,cACKvB,cAAc,gBAAG;AAAA;AAAA,qBAAH,gBAAc;AAAA,6BACzB,QAAC,WAAD;AACA,QAAA,QAAQ,EAAE,0EADV;AAEA,QAAA,UAAU,EAAC,iCAFX;AAGA,QAAA,SAAS,EAAEI,IAHX;AAIA,QAAA,SAAS,EAAEA;AAJX;AAAA;AAAA;AAAA;AAAA;AADyB;AADjC;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAhEQR,W;UAKYD,W,EACMD,W;;;KANlBE,W;AAkET,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport GoogleLogin from 'react-google-login';\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction ManagerMain() {\n    // 리덕스로 로그인되면 다른 컴포넌트로 렌더링하자\n\n    const [temp, setTemp] = useState(false);\n\n    const dispatch = useDispatch();\n    const ismanagerLogin = useSelector((state) => {\n        return state.reducerMenu.ismanagerLogin;\n    });\n    useEffect(async ()=>{\n        // 새로고침해도 그때마다 ajax요청해서 만약 req.header 즉 브라우저의 캐시, 쿠키, 헤더에 토큰이 있다면\n        // 관리자페이지를 Authorizaion할 수 있도록 하는 코드\n        // await axios.post('')\n        if(ismanagerLogin){\n            ajaxForJsonWebToken(temp);\n        }\n    }, [])\n\n    async function test(res) {\n        setTemp(res.accessToken);\n        await axios.get('https://www.googleapis.com/oauth2/v2/userinfo?access_token=' + res.accessToken, {\n            headers: {\n                authorization: `token ${res.accessToken}`,\n                accept: 'application/json'\n            }\n        })\n            .then(data => {\n                const isHeManager = data.data.email === \"bejejupark@gmail.com\";\n                if (isHeManager) {\n                    dispatch({\n                        type: 'LOGIN_MANAGER'\n                    });\n                } else {\n                    console.log('실패함')\n                }\n            }).catch(e => console.log('oAuth token expired'));\n    }\n    async function ajaxForJsonWebToken(temp){\n        // nodejs로 만든 서버에서 google로 로그인이 됐을시, jsonwebtoken을 발급해줄 수 있도록 함\n        // 그래서 새로고침해도 브라우저 쿠키에 토큰 표딱지가 있으면 관리자 페이지가 안꺼질 수 있도록\n        console.log('ajaxForJsonWebToken 실행됌')\n        const result = await axios.post('/login', {\n            token: temp\n        });\n        result\n        .then((data)=>{\n            console.log('data : ', data);\n        })\n        .catch((error)=>{\n            console.log('error : ', error);\n        })\n    }\n\n    return (\n        <div>\n            {ismanagerLogin ? <>로그인됌</>: <>\n                <GoogleLogin\n                clientId={'780867118511-7phr24j325eauivpisavdb062rmi68er.apps.googleusercontent.com'}\n                buttonText=\"Google로 로그인\"\n                onSuccess={test}\n                onFailure={test} />\n            </>}\n        </div>\n    )\n}\n\nexport default ManagerMain\n"]},"metadata":{},"sourceType":"module"}